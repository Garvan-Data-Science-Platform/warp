
name: Test Illumina Genotyping Array

# Controls when the workflow will run
on:
  #run on push to feature branch "kp_GHA_Terra_auth_PD-2682" - REMOVE WHEN DONE TESTING
  push:
    branches:
      - kp_GHA_Terra_auth_PD-2682
  #pull_request:
  #  branches: [ "develop" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # inputs:
    #   image_tag:
    #     description: 'Docker Image Tag (default: branch_name)' 
env:
  PROJECT_NAME: WARP
  # Github repo name
  REPOSITORY_NAME: ${{ github.event.repository.name }}

jobs:
  run_pipeline:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    # actions/checkout MUST come before auth
    - uses: 'actions/checkout@v3'

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
        workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
        # This is our tester service account
        service_account: 'pdt-tester@warp-pipeline-dev.iam.gserviceaccount.com'
        access_token_lifetime: '1000s' # optional, default: '3600s' (1 hour)
        access_token_scopes: 'profile, email, openid'

    # ... further steps are automatically authenticated
    - name: Check working directory
      run: |
        echo "Current directory:"
        pwd
        ls -lht

    - name: Submit job to Terra
      run: |
        # Set these environment variables or replace with your actual values
        TOKEN="${{ steps.auth.outputs.access_token }}"
        NAMESPACE="warp-pipelines"
        WORKSPACE="WARP Tests"         # Replace with your actual workspace name
        
        # Function to call the Firecloud API using the firecloud_api.py script
        firecloud_action() {
            python3 scripts/firecloud_api.py --token "$TOKEN" --namespace "$NAMESPACE" --workspace "$WORKSPACE" --action "$1" "${@:2}"
        }


        # 1. Submit a new workflow
        # Assuming you have a JSON file named submission_data.json containing the submission data
        SUBMISSION_DATA_FILE="submission_data.json"
        SUBMISSION_ID=$(firecloud_action submit --submission_data_file "$SUBMISSION_DATA_FILE")

        # Check if submission was successful
        if [ -z "$SUBMISSION_ID" ]; then
            echo "Submission failed."
            exit 1
        fi

        echo "Submission ID: $SUBMISSION_ID"

        # 2. Poll submission status
        # Polling the status of the submission until it completes
        firecloud_action poll_status --submission_id "$SUBMISSION_ID"

        # 3. Get workflow outputs
        # Replace with the actual Workflow ID and Pipeline Name after submission completes
        WORKFLOW_ID="your_workflow_id"  # Replace with your actual Workflow ID
        PIPELINE_NAME="your_pipeline_name"  # Replace with your actual Pipeline name

        firecloud_action get_outputs --submission_id "$SUBMISSION_ID" --workflow_id "$WORKFLOW_ID" --pipeline_name "$PIPELINE_NAME"

        # Note: You might need to retrieve WORKFLOW_ID from the poll status response or API logs,
        # depending on the Firecloud API response format.

    - name: Check the status of a Terra submission
      run: |
        submissionId="44d890f7-f6dd-4a2c-8841-a10faeab3a07"
        namespace="warp-pipelines"
        name="Illumina-Genotyping-Array_np_copy"
        # Assign the access token to a variable
        ACCESS_TOKEN="${{ steps.auth.outputs.access_token }}"

        printf "\nFetching status for submission ID '%s':" "${submissionId}"
        submissionDetails=$(curl \
                -X GET \
                --header 'Accept: application/json' \
                --header "Authorization: Bearer ${ACCESS_TOKEN}" \
                "https://api.firecloud.org/api/workspaces/$namespace/$name/submissions/$submissionId")

        printf "\nFull JSON Response '%s':" "${submissionDetails}"
        submissionStatus=$(jq -r '.status' <<< "${submissionDetails}")
        workflowsStatus=$(jq -r '.workflows[] | .status' <<< "${submissionDetails}")
        printf "\nSubmissionStatus '%s':" "${submissionStatus}"
        printf "\nWorkflowsStatus '%s':" "${workflowsStatus}"

        submissionList=$(curl -X 'GET' \
        "https://api.firecloud.org/api/workspaces/$namespace/$name/submissions" \
        -H 'accept: */*' \
        -H "Authorization: Bearer ${ACCESS_TOKEN}")

        printf "\nSubmissionList '%s':" "${submissionList}"

      
